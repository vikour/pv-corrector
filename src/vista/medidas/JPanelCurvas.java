/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vista.medidas;

import controlador.CtrAdminGrafica;
import controlador.CtrAdminMedidas;
import java.io.File;
import java.util.List;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.event.ListSelectionListener;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.TableColumn;
import modelo.ConfiguracionCorreccion;
import javax.swing.table.TableModel;
import modelo.CurvaCorregida;
import modelo.CurvaMedida;
import modelo.FormatoFichero;
import modelo.FormatoFicheroFactory;
import modelo.Importador;
import modelo.MetodoCorreccion;
import vista.Grafica.jFrameGrafica;
import vista.JFramePrincipal;

import vista.ViewAdminMedidas;
import vista.correccion.JDialogConfiguracionCorreccion;

/**
 *
 * @author EzequielRodriguez
 */
public class JPanelCurvas extends javax.swing.JPanel implements ViewAdminMedidas {
    private JFramePrincipal prin;
    private JDialogConfiguracionCorreccion jDialogConfiguracionCorreccion;
    private JFileChooser fc;

    /**
     * Creates new form JPanelCurvas
     */
    public JPanelCurvas(JFramePrincipal p) {
        //jTable1.setRowSelectionAllowed(true);
        initComponents();
        prin=p;
        String ffCmp = Importador.EXTENSION_COMPRIMIDO;
        fc = new JFileChooser();
        fc.setDialogTitle("Selecciona el fichero con el módulo");
        FormatoFichero ff = (new FormatoFicheroFactory()).create(FormatoFicheroFactory.FORMATO_CAMPAÑA);
        String filterName = "Módulos (." + ffCmp +", " + ff.getExtension() + ")";
        fc.setFileFilter(new FileNameExtensionFilter(filterName, ffCmp, ff.getExtension()));
        fc.setMultiSelectionEnabled(false);
        fc.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jComboBox2 = new javax.swing.JComboBox<>();
        Exportar = new javax.swing.JButton();
        Borrar = new javax.swing.JButton();
        Grafica = new javax.swing.JButton();
        Campañas = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED, JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
        jTable1 = new javax.swing.JTable();
        Corregir = new javax.swing.JButton();
        Correcciones = new javax.swing.JButton();

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        Exportar.setText("Exportar");
        Exportar.setEnabled(false);

        Borrar.setText("Borrar");
        Borrar.setEnabled(false);

        Grafica.setText("Grafica");
        Grafica.setEnabled(false);

        Campañas.setText("Campañas");
        Campañas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CampañasActionPerformed(evt);
            }
        });

        jTable1.setModel(new TableModelMedidas());
        jTable1.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jScrollPane1.setViewportView(jTable1);

        Corregir.setText("Corregir");
        Corregir.setEnabled(false);

        Correcciones.setText("Correcciones");
        Correcciones.setEnabled(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(Correcciones, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Corregir, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Grafica, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Borrar, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Exportar, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Campañas))
                .addGap(10, 10, 10)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 371, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {Borrar, Campañas, Correcciones, Corregir, Exportar, Grafica});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(Exportar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Borrar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Grafica)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Corregir)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Correcciones)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(Campañas)
                .addContainerGap())
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 335, Short.MAX_VALUE)
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {Borrar, Campañas, Correcciones, Corregir, Exportar, Grafica});

    }// </editor-fold>//GEN-END:initComponents

    private void CampañasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CampañasActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CampañasActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Borrar;
    private javax.swing.JButton Campañas;
    private javax.swing.JButton Correcciones;
    private javax.swing.JButton Corregir;
    private javax.swing.JButton Exportar;
    private javax.swing.JButton Grafica;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
    public void setControlador(CtrAdminMedidas controlador) {
        
        
        Borrar.addActionListener(controlador);
        Borrar.setActionCommand(ViewAdminMedidas.BORRAR);
        
        Exportar.addActionListener(controlador);
        Exportar.setActionCommand(ViewAdminMedidas.EXPORTAR);
        
        Campañas.addActionListener(controlador);
        Campañas.setActionCommand(ViewAdminMedidas.CAMPAÑA);
        
        Grafica.addActionListener(controlador);
        Grafica.setActionCommand(ViewAdminMedidas.GRAFICA);
       
        Corregir.addActionListener(controlador);
        Corregir.setActionCommand(ViewAdminMedidas.CORREGIR);
        
        Correcciones.addActionListener(controlador);
        Correcciones.setActionCommand(ViewAdminMedidas.CORRECCIONES);
        
        jTable1.getSelectionModel().addListSelectionListener(controlador);
        jTable1.addMouseListener(controlador);
        
       // ctr.consultarCampanyas();
    }

    @Override
    public void mostrarCurvas(CurvaMedida[] curva) {
        TableModelMedidas model = new TableModelMedidas(curva);
        jTable1.setModel(model);
        
        for (int i = 0 ; i < model.getColumnCount() ; i++)
            jTable1.getColumn(model.getColumnName(i)).setMinWidth(100);
        
        jTable1.updateUI();
    }

    @Override
    public void vistaAnterior() {
        prin.anteriorPanel();
    }

    @Override
    public void habilitarBorrar(boolean habilitar) {
        Borrar.setEnabled(habilitar);
    }

    @Override
    public void habilitarGrafica(boolean habilitar) {
        Grafica.setEnabled(habilitar);
    }

    @Override
    public void habilitarExportar(boolean habilitar) {
        Exportar.setEnabled(habilitar);
    }

   @Override
   public void habilitarCorregir(boolean habilitar) {
      Corregir.setEnabled(habilitar);
   }

   @Override
   public CurvaMedida getMedidaSeleccionada() {
      TableModelMedidas model = (TableModelMedidas) jTable1.getModel();
      int selected = jTable1.getSelectedRow();

      return model.getMedida(selected);
   }

   @Override
   public void mostrarVistaCorreccion(CurvaMedida original) {
      jDialogConfiguracionCorreccion = new JDialogConfiguracionCorreccion(prin, true, original);
      jDialogConfiguracionCorreccion.setVisible(true);
   }

   @Override
   public List<ConfiguracionCorreccion> getConfiguracionCorreccion() {
      return jDialogConfiguracionCorreccion.getConfiguracionesCorreccion();
   }

   @Override
   public MetodoCorreccion getMetodoCorreccion() {
      return jDialogConfiguracionCorreccion.getMetodoCorreccion();
   }

   @Override
   public void error(String messageString) {
      JOptionPane.showMessageDialog(prin, messageString);
   }

    @Override
    public void habilitarCorrecciones(boolean habilitar) {
        Correcciones.setEnabled(habilitar);
    }

    @Override
    public void vistaSiguiente() {
        prin.siguientePanel();
    }
   @Override
   public File mostrarSelectorFicheroNuevo() {
      int returnVal = fc.showSaveDialog(prin);
      File f = null;

      if (returnVal == JFileChooser.APPROVE_OPTION)
         f = fc.getSelectedFile();
      
      return f;
   }

   @Override
   public void mostrarMensajeSuccess(String message) {
      JOptionPane.showMessageDialog(prin, message);
   }

    @Override
    public void actualizarTabla() {
        jTable1.updateUI();
    }

    public void showCurva(CurvaMedida c) {
        jFrameGrafica jf=new jFrameGrafica();
        CtrAdminGrafica ctr=new CtrAdminGrafica(jf);
        jf.setControlador(ctr);
        jf.showCurva(c);
        jf.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        jf.setVisible(true);
    }

    @Override
    public void showCurvaCorregida(CurvaCorregida correccion) {
        jFrameGrafica jf=new jFrameGrafica();
        CtrAdminGrafica ctr=new CtrAdminGrafica(jf);
        jf.setControlador(ctr);
        jf.muestraGraficaCorregida(correccion);
        jf.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        jf.setVisible(true);
    }
    

}
