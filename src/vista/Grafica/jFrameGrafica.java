/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vista.Grafica;

import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JPanel;

import modelo.*;

import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
import vista.JFramePrincipal;
import vista.ViewAdminGrafica;

/**
 *
 * @author Elias
 */
public class jFrameGrafica extends javax.swing.JFrame implements ViewAdminGrafica {

    /**
     * Creates new form jFrameCurvas
     */
    private XYSeries curva; //se usa como auxiliar
    
    private XYSeries corregida;
    private XYSeriesCollection dataset;
    private static final String IV= "CURVA I-V";
    private static final String PV= "CURVA P-V";
    private List<MedidaCurva> tensiones;
    private List<MedidaCurva> intensidades;
    private List<MedidaOrdenada> potencias;
    private Object[] datos;
    private List<MedidaTension> mt =new ArrayList<>();
    private List<MedidaIntensidad> mi=new ArrayList<>();
    private TableModelGrafica tm;
    private CurvaIV grafica;
    
    
    
    public jFrameGrafica(){
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanelToggleButtonsIV_PV1 = new vista.Grafica.JPanelToggleButtonsIV_PV();
        jPanelInfoCurvaMedida1 = new vista.Grafica.JPanelInfoCurvaMedida();
        jPanel1 = createChartPanel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 478, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jTable1.setModel(
            new TableModelGrafica()

        );
        jTable1.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jScrollPane1.setViewportView(jTable1);

        jLabel1.setText("INTENSIDAD");

        jLabel2.setText("TENSION");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addComponent(jLabel1)
                        .addGap(2, 2, 2)
                        .addComponent(jLabel2)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanelToggleButtonsIV_PV1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPanelInfoCurvaMedida1, javax.swing.GroupLayout.PREFERRED_SIZE, 287, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanelToggleButtonsIV_PV1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanelInfoCurvaMedida1, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(jFrameGrafica.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(jFrameGrafica.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(jFrameGrafica.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(jFrameGrafica.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        
        
        
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new jFrameGrafica().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private vista.Grafica.JPanelInfoCurvaMedida jPanelInfoCurvaMedida1;
    private vista.Grafica.JPanelToggleButtonsIV_PV jPanelToggleButtonsIV_PV1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
    @Override
    public void setControlador(ActionListener ctr) {
        jPanelToggleButtonsIV_PV1.setController(ctr, IV, PV);
    }
    
    public void cargaDatos(Object[] datos){
       jPanelInfoCurvaMedida1.cargaInfo(datos);
    }

    @Override
    public void visualizaGrafica(List<MedidaCurva> tensiones, List<MedidaCurva> intensidades, Object[] datos) {
        
        tm=new TableModelGrafica(intensidades, tensiones);
        jTable1.setModel(tm);
        cargaDatos(datos);
        generaGrafica(tensiones, intensidades);
        jTable1.updateUI();
        
    }

    private JPanel createChartPanel() {
        String chartTitle = "Curva I-V";
        String xAxisLabel = "V";
        String yAxisLabel = "I(A)";
 
    XYDataset dataset = createDataset();
 
    JFreeChart chart = ChartFactory.createXYLineChart(chartTitle,
            xAxisLabel, yAxisLabel, dataset);
 
    return new ChartPanel(chart);
    }

    private XYDataset createDataset() {
        XYSeriesCollection dataset = new XYSeriesCollection();
        XYSeries curva1 = new XYSeries("CurvaIV");
        
        curva=curva1;
        this.dataset=dataset;
        
        dataset.addSeries(curva1);
        return dataset;
    }
   
    private void generaGrafica(List<MedidaCurva> lt, List<MedidaCurva> li){
        curva=null;
        curva=new XYSeries("CurvaIV");
        dataset.removeAllSeries();
        dataset.addSeries(curva);
        int i=0;
        while(i<lt.size()){
            curva.addOrUpdate(lt.get(i).getValor(),li.get(i).getValor());
            i++;
        }
        jPanel1.updateUI();
        
    }

    private void crearChart(String titulo, String v, String i) {
        JFreeChart chart=ChartFactory.createXYLineChart(titulo, v, i, dataset);
        
        jPanel1=new ChartPanel(chart);
        jPanel1.updateUI();
    }


    @Override
    public void showCurva(CurvaIV c) {
        
        Medida isc,voc,pmax,vmax,imax;
        String fecha,hora;
        double ff=c.getFF();
        int id=c.getId();
        tensiones=c.getTensiones();
        intensidades=c.getIntensidades();
        potencias=c.getPotencias();
        fecha=c.getFecha();
        hora=c.getHora();
        isc=c.getIsc();
        voc=c.getVoc();
        pmax=c.getPmax();
        vmax=c.getVmax();
        imax=c.getImax();
        datos =new Object[] {isc,voc,pmax,vmax,imax,fecha,hora,ff,id};
        grafica=c;
        graficaIV();

    }
    
    private void generaGraficaPV(List<MedidaOrdenada> potencias, List<MedidaCurva> intensidades){
  
        dataset.removeAllSeries();
        
        
        curva=new XYSeries("CurvaPV");
        dataset.addSeries(curva);
        int i=0;
        while(i<potencias.size()){
            curva.addOrUpdate(potencias.get(i).getValor(),intensidades.get(i).getValor());
            i++;
        }
        
        jPanel1.updateUI();
        
    }
    
    
    @Override
    public void graficaPV(){
        if(grafica instanceof CurvaCorregida){
            generaCurvaPVCorregida();
        }
        else{
            generaGraficaPV(potencias, intensidades);
        }
    }
    
    @Override
    public void graficaIV(){
        if(grafica instanceof CurvaCorregida){
            generaCurvaIVCorregida();
        }else{
            generaGrafica(tensiones, intensidades);
        }
    }

    

    public void setCurva(XYSeries curva) {
        this.curva = curva;
    }

    public void setCorregida(XYSeries corregida) {
        this.corregida = corregida;
    }

    public void setDataset(XYSeriesCollection dataset) {
        this.dataset = dataset;
    }

    public void setTensiones(List<MedidaCurva> tensiones) {
        this.tensiones = tensiones;
    }

    public void setIntensidades(List<MedidaCurva> intensidades) {
        this.intensidades = intensidades;
    }

    public void setPotencias(List<MedidaOrdenada> potencias) {
        this.potencias = potencias;
    }

    public void setDatos(Object[] datos) {
        this.datos = datos;
    }

    public void setTm(TableModelGrafica tm) {
        this.tm = tm;
    }

    @Override
    public void muestraGraficaCorregida(CurvaCorregida c) {
        grafica=c;
        generaCurvaIVCorregida();
    }

    private void generaCurvaIVCorregida() {
        CurvaCorregida aux=(CurvaCorregida) grafica;
        curva=new XYSeries("Curva Original");
        corregida=new XYSeries("Curva Corregida");
        
        dataset.removeAllSeries();
        dataset.addSeries(corregida);
        int i=0;
        List<MedidaCurva> tensionesC=aux.getTensiones();
        List<MedidaCurva> intensidadesC=aux.getIntensidades();
        while(i<tensionesC.size()){
            corregida.addOrUpdate(tensionesC.get(i).getValor(),intensidadesC.get(i).getValor());
            i++;
        }
        
        CurvaMedida original=aux.getOriginal();
        
        dataset.addSeries(curva);
        i=0;
        tensionesC=original.getTensiones();
        intensidadesC=original.getIntensidades();
        while(i<tensionesC.size()){
            curva.addOrUpdate(tensionesC.get(i).getValor(),intensidadesC.get(i).getValor());
            i++;
        }
        jPanel1.updateUI();
    }

    private void generaCurvaPVCorregida() {
        CurvaCorregida aux=(CurvaCorregida) grafica;
        curva=new XYSeries("Curva Original");
        corregida=new XYSeries("Curva Corregida");
        
        dataset.removeAllSeries();
        dataset.addSeries(corregida);
        int i=0;
        List<MedidaOrdenada> potencias=aux.getPotencias();
        List<MedidaCurva> intensidadesC=aux.getIntensidades();
        while(i<potencias.size()){
            corregida.addOrUpdate(potencias.get(i).getValor(),intensidadesC.get(i).getValor());
            i++;
        }
        
        CurvaMedida original=aux.getOriginal();
        
        dataset.addSeries(curva);
        i=0;
        potencias=original.getPotencias();
        intensidadesC=original.getIntensidades();
        while(i<potencias.size()){
            curva.addOrUpdate(potencias.get(i).getValor(),intensidadesC.get(i).getValor());
            i++;
        }
        jPanel1.updateUI();
    }
    
    

    

    
}
